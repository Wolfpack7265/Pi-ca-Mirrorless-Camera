import cv2 as cv
import numpy as np
import configparser
from matplotlib import pyplot as plt

def load_config(config_file_path):
    config = configparser.ConfigParser()
    config.read(config_file_path)
    return config


def focus_peaking(frame, threshold=100, blur_kernel_size=(3, 3)):
    # Convert the frame to grayscale
    img = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)

    # Apply Gaussian blur to the frame to reduce noise
    blurred_img = cv.GaussianBlur(img, blur_kernel_size, 0)

    # Calculate the gradient magnitude using Sobel operators
    gradient_x = cv.Sobel(blurred_img, cv.CV_64F, 1, 0, ksize=3)
    gradient_y = cv.Sobel(blurred_img, cv.CV_64F, 0, 1, ksize=3)
    gradient_magnitude = np.sqrt(gradient_x ** 2 + gradient_y ** 2)

    # Convert the gradient magnitude to 8-bit image
    gradient_8bit = np.uint8(gradient_magnitude)

    # Threshold the gradient magnitude to find edges
    _, edges = cv.threshold(gradient_8bit, threshold, 255, cv.THRESH_BINARY)

    # Convert the original frame to color for highlighting edges in red
    img_color = frame.copy()

    # Apply the red color to in-focus pixels
    img_color[edges > 0] = [0, 255, 255] #-> B, G, R

    return img_color

def histogram(img):
    histSize = 256
    histRange = (0, 256) # the upper boundary is exclusive
    accumulate = False
    hist = cv.calcHist([img], [0], None, [256], [0, 256])
    #hist = cv.calcHist([img], [0], None, [histSize], histRange, accumulate=accumulate)
    hist_w = 512
    hist_h = 400
    bin_w = int(round( hist_w/histSize ))
    
    histImage = np.zeros((hist_h, hist_w, 3), dtype=np.uint8)
    # compute a grayscale histogram
   
    cv.normalize(hist, hist, alpha=0, beta=hist_h, norm_type=cv.NORM_MINMAX)

    
    for i in range(1, histSize):
        cv.line(histImage, ( bin_w*(i-1), hist_h - int(hist[i-1]) ), ( bin_w*(i), hist_h - int(hist[i]) ), ( 255, 255, 255), thickness=2)


    cv.imshow('Source image', img)

    cv.namedWindow('calcHist Demo', cv.WINDOW_NORMAL) 
    cv.resizeWindow('calcHist Demo', 960, 540)
    cv.imshow('calcHist Demo', histImage)



def main(config_file_path):
    # Load configuration from the file
    config = load_config(config_file_path)

    # Get camera index from the configuration
    camera_index = int(config.get('Camera', 'Index'))

    # Initialize the video capture object for the webcam
    cap = cv.VideoCapture(camera_index)

    if not cap.isOpened():
        print("Error: Could not access the camera. Make sure it's connected and not in use.")
        return

    # Wait for the user to accept using the camera
    print("Press 'q' to quit the application.")
    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Unable to capture frame.")
            break

        # Apply focus peaking to the frame
        threshold = int(config.get('FocusPeaking', 'Threshold'))
        blur_kernel_size = eval(config.get('FocusPeaking', 'BlurKernelSize'))
        output_frame = focus_peaking(frame, threshold, blur_kernel_size)

        # Display the frame with focus peaking
        cv.namedWindow("Focus Peaking Test", cv.WINDOW_NORMAL) 
        cv.resizeWindow("Focus Peaking Test", 960, 540)
        cv.imshow("Focus Peaking Test", output_frame)

        # Exit when the 'q' key is pressed
        if cv.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the video capture object and close all windows
    cap.release()
    cv.destroyAllWindows()


if __name__ == "__main__":
    config_file_path = "config.ini"
    main(config_file_path)